"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.cloudinaryUrlFactory = void 0;

const loaderUtils = require('loader-utils');

const sassLoader = require('sass-loader');

const pick = require('lodash/pick'); // eslint-disable-next-line global-require


const cloudinaryUrlFactory = require('./cloudinary-sass-function').default;

exports.cloudinaryUrlFactory = cloudinaryUrlFactory;
const cloudinaryFunctionName = 'cloudinary-url';
const cloudinaryFunctionSig = `${cloudinaryFunctionName}($id, $params)`;
const cloudinaryOptionKeys = ['cloud_name', 'private_cdn', 'secure_distribution', 'cname', 'cdn_subdomain'];

function _default(source) {
  const options = Object.assign({
    functions: {}
  }, loaderUtils.getOptions(this));

  if (!options.cloud_name) {
    throw new Error('`cloud_name` loader option is mandatory.');
  }

  const registered = Object.keys(options.functions);

  if (registered.find(x => x === cloudinaryFunctionName)) {
    throw new Error(`Function name '${cloudinaryFunctionName}' is reserved`);
  }

  const cloudinaryOptions = pick(options, cloudinaryOptionKeys);
  options.functions[cloudinaryFunctionSig] = cloudinaryUrlFactory(cloudinaryOptions, options.implementation);
  this.loaders[this.loaderIndex].options = options;
  sassLoader.bind(this)(source);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2FkZXIuanMiXSwibmFtZXMiOlsibG9hZGVyVXRpbHMiLCJyZXF1aXJlIiwic2Fzc0xvYWRlciIsInBpY2siLCJjbG91ZGluYXJ5VXJsRmFjdG9yeSIsImRlZmF1bHQiLCJjbG91ZGluYXJ5RnVuY3Rpb25OYW1lIiwiY2xvdWRpbmFyeUZ1bmN0aW9uU2lnIiwiY2xvdWRpbmFyeU9wdGlvbktleXMiLCJzb3VyY2UiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZnVuY3Rpb25zIiwiZ2V0T3B0aW9ucyIsImNsb3VkX25hbWUiLCJFcnJvciIsInJlZ2lzdGVyZWQiLCJrZXlzIiwiZmluZCIsIngiLCJjbG91ZGluYXJ5T3B0aW9ucyIsImltcGxlbWVudGF0aW9uIiwibG9hZGVycyIsImxvYWRlckluZGV4IiwiYmluZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQUFNQSxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQTNCOztBQUNBLE1BQU1DLFVBQVUsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FBMUI7O0FBQ0EsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsYUFBRCxDQUFwQixDLENBRUE7OztBQUNPLE1BQU1HLG9CQUFvQixHQUFHSCxPQUFPLENBQUMsNEJBQUQsQ0FBUCxDQUFzQ0ksT0FBbkU7OztBQUVQLE1BQU1DLHNCQUFzQixHQUFHLGdCQUEvQjtBQUNBLE1BQU1DLHFCQUFxQixHQUFJLEdBQUVELHNCQUF1QixnQkFBeEQ7QUFDQSxNQUFNRSxvQkFBb0IsR0FBRyxDQUFDLFlBQUQsRUFBZSxhQUFmLEVBQThCLHFCQUE5QixFQUFxRCxPQUFyRCxFQUE4RCxlQUE5RCxDQUE3Qjs7QUFFZSxrQkFBVUMsTUFBVixFQUFrQjtBQUMvQixRQUFNQyxPQUFPLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQUVDLElBQUFBLFNBQVMsRUFBRTtBQUFiLEdBQWQsRUFBaUNiLFdBQVcsQ0FBQ2MsVUFBWixDQUF1QixJQUF2QixDQUFqQyxDQUFoQjs7QUFFQSxNQUFJLENBQUNKLE9BQU8sQ0FBQ0ssVUFBYixFQUF5QjtBQUN2QixVQUFNLElBQUlDLEtBQUosQ0FBVSwwQ0FBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBTUMsVUFBVSxHQUFHTixNQUFNLENBQUNPLElBQVAsQ0FBWVIsT0FBTyxDQUFDRyxTQUFwQixDQUFuQjs7QUFDQSxNQUFJSSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JDLENBQUMsSUFBSUEsQ0FBQyxLQUFLZCxzQkFBM0IsQ0FBSixFQUF3RDtBQUN0RCxVQUFNLElBQUlVLEtBQUosQ0FBVyxrQkFBaUJWLHNCQUF1QixlQUFuRCxDQUFOO0FBQ0Q7O0FBQ0QsUUFBTWUsaUJBQWlCLEdBQUdsQixJQUFJLENBQUNPLE9BQUQsRUFBVUYsb0JBQVYsQ0FBOUI7QUFDQUUsRUFBQUEsT0FBTyxDQUFDRyxTQUFSLENBQWtCTixxQkFBbEIsSUFBMkNILG9CQUFvQixDQUFDaUIsaUJBQUQsRUFBb0JYLE9BQU8sQ0FBQ1ksY0FBNUIsQ0FBL0Q7QUFDQSxPQUFLQyxPQUFMLENBQWEsS0FBS0MsV0FBbEIsRUFBK0JkLE9BQS9CLEdBQXlDQSxPQUF6QztBQUVBUixFQUFBQSxVQUFVLENBQUN1QixJQUFYLENBQWdCLElBQWhCLEVBQXNCaEIsTUFBdEI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvYWRlclV0aWxzID0gcmVxdWlyZSgnbG9hZGVyLXV0aWxzJyk7XG5jb25zdCBzYXNzTG9hZGVyID0gcmVxdWlyZSgnc2Fzcy1sb2FkZXInKTtcbmNvbnN0IHBpY2sgPSByZXF1aXJlKCdsb2Rhc2gvcGljaycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbmV4cG9ydCBjb25zdCBjbG91ZGluYXJ5VXJsRmFjdG9yeSA9IHJlcXVpcmUoJy4vY2xvdWRpbmFyeS1zYXNzLWZ1bmN0aW9uJykuZGVmYXVsdDtcblxuY29uc3QgY2xvdWRpbmFyeUZ1bmN0aW9uTmFtZSA9ICdjbG91ZGluYXJ5LXVybCc7XG5jb25zdCBjbG91ZGluYXJ5RnVuY3Rpb25TaWcgPSBgJHtjbG91ZGluYXJ5RnVuY3Rpb25OYW1lfSgkaWQsICRwYXJhbXMpYDtcbmNvbnN0IGNsb3VkaW5hcnlPcHRpb25LZXlzID0gWydjbG91ZF9uYW1lJywgJ3ByaXZhdGVfY2RuJywgJ3NlY3VyZV9kaXN0cmlidXRpb24nLCAnY25hbWUnLCAnY2RuX3N1YmRvbWFpbiddO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc291cmNlKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgZnVuY3Rpb25zOiB7fSB9LCBsb2FkZXJVdGlscy5nZXRPcHRpb25zKHRoaXMpKTtcblxuICBpZiAoIW9wdGlvbnMuY2xvdWRfbmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYGNsb3VkX25hbWVgIGxvYWRlciBvcHRpb24gaXMgbWFuZGF0b3J5LicpO1xuICB9XG5cbiAgY29uc3QgcmVnaXN0ZXJlZCA9IE9iamVjdC5rZXlzKG9wdGlvbnMuZnVuY3Rpb25zKTtcbiAgaWYgKHJlZ2lzdGVyZWQuZmluZCh4ID0+IHggPT09IGNsb3VkaW5hcnlGdW5jdGlvbk5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBGdW5jdGlvbiBuYW1lICcke2Nsb3VkaW5hcnlGdW5jdGlvbk5hbWV9JyBpcyByZXNlcnZlZGApO1xuICB9XG4gIGNvbnN0IGNsb3VkaW5hcnlPcHRpb25zID0gcGljayhvcHRpb25zLCBjbG91ZGluYXJ5T3B0aW9uS2V5cyk7XG4gIG9wdGlvbnMuZnVuY3Rpb25zW2Nsb3VkaW5hcnlGdW5jdGlvblNpZ10gPSBjbG91ZGluYXJ5VXJsRmFjdG9yeShjbG91ZGluYXJ5T3B0aW9ucywgb3B0aW9ucy5pbXBsZW1lbnRhdGlvbik7XG4gIHRoaXMubG9hZGVyc1t0aGlzLmxvYWRlckluZGV4XS5vcHRpb25zID0gb3B0aW9ucztcblxuICBzYXNzTG9hZGVyLmJpbmQodGhpcykoc291cmNlKTtcbn1cbiJdfQ==